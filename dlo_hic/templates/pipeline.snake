import matplotlib
matplotlib.use("Agg")
import logging
import re
import os
from os.path import join
import sys

import dlo_hic.config
import dlo_hic.tools.helper as dlo_help
import dlo_hic.tools.main_process as dlo_main
import dlo_hic.tools.quality_control as dlo_qc
from dlo_hic.utils.pipeline import *

pipeline_log = logging.getLogger("pipeline")
root_log = logging.getLogger()
root_log.setLevel(10)
console = logging.StreamHandler(stream=sys.stderr)
formatter = logging.Formatter(
    fmt=dlo_hic.config.LOGGING_FMT,
    datefmt=dlo_hic.config.LOGGING_DATE_FMT)
console.setFormatter(formatter)

# parse config
config_file = "./pipeline_config.ini"
config = parse_config(config_file)
if config['GLOBAL']['log_level'] <= 10:
    pipeline_log.debug(config)

root_log.setLevel(config['GLOBAL']['log_level'])

# load global settings
setting = load_global_setting(config)
output_files = output_files(setting)
sub_dir = sub_dir(setting)
qc_files = pipeline_qc_files(setting)
local_logger = local_logger(setting)

pipeline_log.info("working at %s"%setting.working_dir)
make_result_dirs(setting.working_dir)

####################################
# Rule Definition
####################################

ALL = get_targets(setting)

rule all:
    input:
        ALL


rule extract_PET:
    # --------------------
    # 1. extract_PET
    #
    #  Tool Interface:
    #     ( fastq, out1, out2,
    #       linker_a, linker_b,
    #       mismatch, rest, processes, PET_len_range, PET_cut_len,
    #       adapter, mismatch_adapter,
    #       log_file, flag_file, chunk_size )
    #
    #     ( fq_path, log_file, n, start_pos, prob_thresh, figure, fig_size, dpi )
    # --------------------
    threads: setting.ncpu
    input:
        get_input_fastq(setting.input_dir)
    output:
        pet1 = output_files('{sample}')['pet1.fq'],
        pet2 = output_files('{sample}')['pet2.fq'],
        qc_comp = qc_files('{sample}')['extract_PET']['main']
    params:
        llog = local_logger,
        sample = '{sample}'
    run:
        llog = params.llog
        llog.log_start("extract_PET")

        conf = config['EXTRACT_PET']
        rest = config['DATA']['restriction_site']

        if config['GLOBAL']['log_level'] <= 10:
            trim_flag = output_files(params.sample)['trim_flag']
        else:
            trim_flag = None

        if conf['adapter'] == 'auto':
            dir_ = join(setting.working_dir, DIRS['qc'])
            log_path = join(dir_, params.sample + '.adapter.txt')
            fig_path = join(dir_, params.sample + '.adapter.svg')
            fig_size = (12, 5)
            adapter = dlo_help.infer_adapter.main(input[0], log_path, conf['n_fq_for_infer'],
                                                  conf['search_start_pos'], conf['prob_thresh'],
                                                  fig_path, fig_size, 600)
        else:
            adapter = conf['adapter']

        chunk_size = 100000
        # run tool
        dlo_main.extract_PET.log = llog
        dlo_main.extract_PET.main(
            input[0], output.pet1, output.pet2,
            conf['linker_a'], conf['linker_b'],
            conf['mismatch'], rest, setting.ncpu, conf['pet_len_range'], conf['pet_cut_len'],
            adapter, conf['mismatch_adapter'],
            output.qc_comp, trim_flag, chunk_size)

        llog.log_end("extract_PET")


rule build_bedpe:
    # --------------------
    # 2. build_bedpe
    #
    #  Tool Interface:
    #     ( input1, input2, output,
    #       ncpu, bwa_index, mapq, iterative,
    #       log_file, bwa_log_file,
    #       keep_iter_files, keep_sam )
    # --------------------
    threads: setting.ncpu
    input:
        rules.extract_PET.output
    output:
        bedpe      = output_files("{sample}")["uniq.bedpe"],
        qc_bedpe   = qc_files('{sample}')['build_bedpe']['main']
    params:
        llog = local_logger,
        bwa_log    = sub_dir("log") + "/{sample}.bwa.log",
        keep_iter_files = config['GLOBAL']['log_level'] <= 10,
        keep_sam = (config['PROCESSES']['keep'] == 'ALL') or ('pet.sam' in config['PROCESSES']['keep'])
    run:
        llog = params.llog
        llog.log_start("build_bedpe")

        # load parameters
        conf = config['BUILD_BEDPE']

        bwa_index = config['DATA']['bwa_index_prefix']

        # run tool
        dlo_main.build_bedpe.log = llog
        dlo_main.build_bedpe.main(
            input[0], input[1], output.bedpe.replace('.uniq.bedpe', ''),
            setting.ncpu, bwa_index, conf['mapq'], conf['iterations'],
            output.qc_bedpe, params.bwa_log,
            params.keep_iter_files, params.keep_sam)

        llog.log_end("build_bedpe")


rest_name = config['DATA']['restriction_name']
rest_file = config['NOISE_REDUCE']['restriction_sites_file']
if not rest_file:
    rest_file = join(setting.working_dir, rest_name+".hdf5")

fasta = config['DATA']['fasta']


rule extract_fragments:
    # --------------------
    # extract_fragments
    # 
    #  Tool Interface:
    #     ( fasta, rest, output, processes )
    # --------------------
    threads: setting.ncpu
    input: fasta
    output: rest_file
    run:
        rest = config['DATA']['restriction_site']
        rest = rest.replace("*", "")
        dlo_help.extract_fragments.main(
            fasta, rest, output[0], 'hdf5', setting.ncpu)


rule noise_reduce:
    # --------------------
    # 3. noise_reduce
    #
    #  Tool Interface:
    #     ( bedpe, output,
    #       restriction, processes,
    #       threshold_span )
    # --------------------
    threads: setting.ncpu
    input:
        bedpe = rules.build_bedpe.output.bedpe,
        rest_file = rest_file
    output: 
        out = output_files("{sample}")['nr.bedpe'],
        sel = output_files("{sample}")['nr.bedpe.sel'],
        re  = output_files("{sample}")['nr.bedpe.re'],
        qc_noise_reduce = qc_files('{sample}')['noise_reduce']['main']
    params:
        llog = local_logger
    run:
        llog = params.llog
        llog.log_start("noise_reduce")

        # load parameters
        conf = config['NOISE_REDUCE']

        bedpe = input.bedpe
        restriction = input.rest_file
        thresh_span = conf['threshold_span']

        # run tool
        dlo_main.noise_reduce.log = llog
        dlo_main.noise_reduce.main(
            bedpe, output.out,
            restriction, setting.ncpu, thresh_span,
            output.qc_noise_reduce)

        llog.log_end("noise_reduce")


rule bedpe2pairs:
    # --------------------
    # 4. bedpe2pairs:
    #
    #  Tool Interface:
    #     ( bedpe, pairs, keep, remove_redundancy, ncpu )
    # --------------------
    threads: setting.ncpu
    input:
        rules.noise_reduce.output
    output:
        [ output_files("{sample}")["pairs.gz"], output_files("{sample}")["pairs.gz.px2"] ] +\
        ([output_files("{sample}")["pairs"]] if '.hic' in setting.result_formats else [])
    params:
        llog = local_logger
    run:
        llog = params.llog
        llog.log_start("bedpe2pairs")

        if '.hic' in setting.result_formats:
            keep_ = True
        else:
            keep_ = False

        out = output[0].replace(".gz", "")

        # run tool
        dlo_main.bedpe2pairs.log = llog
        dlo_main.bedpe2pairs.main(input[0], out, keep_, True, setting.ncpu)

        llog.log_end("bedpe2pairs")


rule qc_pairs:
    # --------------------
    #  pairs quility control
    #
    #  Tool Interfaces:
    #
    #  1. chrs_interactions:
    #     ( input, chromosome_file, output )
    # --------------------
    threads: 1
    input:
        rules.bedpe2pairs.output
    output:
        chr_interactions = qc_files('{sample}')['bedpe2pairs']['chr_interactions'],
        comp = qc_files('{sample}')['bedpe2pairs']['comp'],
        pet_span_stats = qc_files('{sample}')['bedpe2pairs']['pet_span_stats'],
        pet_span_fig = qc_files('{sample}')['bedpe2pairs']['pet_span_fig'],
    run:
        chrom_file = setting.chromosome_file
        supported = supported_chromosomes()
        if chrom_file in supported:
            chrom_id = chrom_file
            chrom_file = supported[chrom_id]
        dlo_qc.chr_interactions.main(input[0], chrom_file, output.chr_interactions)

        cutoff = config['QUALITY_CONTROL']['long_range_cutoff']
        dlo_qc.interactions_qc.main(input[0], output.comp, cutoff)
        sample_lines = 1000
        hist_bins = 1000
        dlo_qc.PET_span_stats.main(input[0], output.pet_span_stats, output.pet_span_fig, sample_lines, hist_bins)


rule to_hic:
    # --------------------
    # convert .pairs to .hic file
    #
    # call command:
    #   java juicertools.jar pre
    # --------------------
    threads: setting.ncpu
    input:
        rules.bedpe2pairs.output
    output:
        hic = output_files("{sample}")['hic'],
    params:
        log = join(sub_dir("log"),  "{sample}.juicertools.log"),
        llog = local_logger
    run:
        llog = params.llog
        llog.log_start("to_hic")
        conf = config['RESULT']

        input_pairs = input[2]
        resolutions = config['RESULT']['resolutions']
        resolutions = ",".join([str(r) for r in resolutions])

        with open(params.log, 'w') as f_log:
            p = subprocess.check_call(
                ['java', '-jar', conf['juicer_tools_jar'], 'pre', input_pairs, output.hic, setting.chromosome_file, '-r', resolutions],
                stderr=f_log, stdout=f_log)
        llog.log_end("to_hic")


rule to_cooler:
    # --------------------
    # convert .pairs to .cool file
    # 
    # call command:
    #   cooler makebins
    #   cooler cload
    #   cooler balance (optional)
    #   cooler zoomify (optional)
    # --------------------
    threads: setting.ncpu
    input:
        rules.bedpe2pairs.output
    output:
        [ output_files("{sample}")['cool'] ] +\ 
        [ output_files("{sample}")['mcool'] ]
    params:
        log  = join(sub_dir('log'), '{sample}.cooler.log'),
        llog = local_logger
    run:
        llog = params.llog
        llog.log_start("to_cooler")
        chrom_file = setting.chromosome_file

        conf = config['RESULT']
        resolutions = sorted(conf['resolutions'])
        binsize = str(resolutions[0])
        resolutions_ = ",".join([str(i) for i in resolutions])

        input_pairs = input[0]
        outcool = output[0]
        bed = outcool + ".tmp.bed"

        supported = supported_chromosomes()
        if chrom_file in supported:
            chrom_id = chrom_file
            chrom_file = supported[chrom_id]

        with open(bed, 'w') as f, open(params.log, 'w') as f_log:
            subprocess.check_call(['cooler', 'makebins', chrom_file, binsize], stdout=f, stderr=f_log)
            subprocess.check_call(['cooler', 'cload', 'pairix', '-p', str(setting.ncpu), bed, input_pairs, outcool], stderr=f_log)
            try:
                subprocess.check_call(['cooler', 'zoomify', '-p', str(setting.ncpu), '--balance', '-r', resolutions_, outcool], stderr=f_log)
            except Exception as e:
                llog.warning(str(e))
                llog.warning("Matrix can not balance.")
                subprocess.check_call(['cooler', 'zoomify', '-p', str(setting.ncpu), '-r', resolutions_, outcool], stderr=f_log)

        llog.log_end("to_cooler")


def get_plot_cmap_input(wildcard):
    if '.cool' in setting.result_formats:
        return output_files(wildcard.sample)['mcool']
    elif '.hic' in setting.result_formats:
        return output_files(wildcard.sample)['hic']
    else:
        return


cmap_chroms_dir = join(setting.working_dir, join(DIRS['qc'], '{sample}.chroms_cmap'))
cmap_global_fig = join(setting.working_dir, join(DIRS['qc'], "{sample}.global_cmap.svg"))
is_dot_hic = '.hic' in setting.result_formats
is_cooler = '.cool' in setting.result_formats
is_plot_cmap = is_dot_hic or is_cooler


rule plot_contact_map:
    # --------------------
    # plot Hi-C contact map
    #
    # Tool Interface:
    #    (path, label, binsize, balance, global_mat,
    #     chrom_list, fig_format, figure_size, dpi)
    # --------------------
    threads: 1
    input: 
        get_plot_cmap_input
    output: 
        [directory(cmap_chroms_dir), cmap_global_fig] if is_plot_cmap else []
    params:
        llog = local_logger,
        sample = '{sample}'
    run:
        sid = params.sample
        balance = False
        binsize = 'auto'
        fig_format = '.svg'
        dpi = 300

        chrom_file = setting.chromosome_file
        supported = supported_chromosomes()
        is_supported = False
        if chrom_file in supported:
            chrom_id = chrom_file
            chrom_file = supported[chrom_id]
            is_supported = True
        chrom_list = []
        with open(chrom_file) as f:
            for line in f:
                chrom = line.split()[0]
                chrom_list.append(chrom)

        # filter main chroms
        if is_supported:
            main_chroms = [c for c in chrom_list if re.match("(chr)?[0-9]+", c)] + ['chrX']
        else:
            main_chroms = chrom_list

        chroms = ",".join(main_chroms)

        dlo_help.plot_contact_map.log = params.llog
        out_label_chroms = join(setting.working_dir, join(DIRS['qc'], '{}.chroms_cmap'.format(sid)))
        dlo_help.plot_contact_map.main(input, out_label_chroms, binsize, balance, False, chroms, fig_format, "10,9.5", dpi)
        out_label_global = join(setting.working_dir, join(DIRS['qc'], '{}.global_cmap'.format(sid)))
        dlo_help.plot_contact_map.main(input, out_label_global, binsize, balance, True,  chroms, fig_format, "10,10", dpi)


rule qc_gen_report:
    # --------------------
    # generate QC report
    #
    #  Tool Interface:
    #     ( pipe_workdir, output_dir, out_format )
    # --------------------
    threads: 1
    input:
        all_qc_files('{sample}', workdir=setting.working_dir) + \
        ([cmap_chroms_dir, cmap_global_fig] if is_plot_cmap else []) + \
        ([rules.to_hic.output] if is_dot_hic else [])
    output:
        join(sub_dir("qc"), "{sample}." + setting.qc_report_format)
    params:
        sample = '{sample}'
    run:
        # copy config file to qc dir
        dir_ = join(setting.working_dir, DIRS['qc'])
        path_conf = join(dir_, params.sample+'.pipe_config.ini')
        subprocess.check_call(['cp', config_file, path_conf])

        dlo_qc.gen_qc_report.main(setting.working_dir, params.sample, output[0], setting.qc_report_format)
